plot(model2)
# Loading the library
library(glmnet)
# Loading the data
data(swiss)
x_vars <- model.matrix(Fertility~. , swiss)[,-1]
y_var <- swiss$Fertility
lambda_seq <- 10^seq(2, -2, by = -.1)
# Splitting the data into test and train
set.seed(86)
train = sample(1:nrow(x_vars), nrow(x_vars)/2)
x_test = (-train)
y_test = y_var[x_test]
cv_output <- cv.glmnet(x_vars[train,], y_var[train],
alpha = 1, lambda = lambda_seq,
nfolds = 5)
# identifying best lamda
best_lam <- cv_output$lambda.min
best_lam
# Rebuilding the model with best lamda value identified
lasso_best <- glmnet(x_vars[train,], y_var[train], alpha = 1, lambda = best_lam)
pred <- predict(lasso_best, s = best_lam, newx = x_vars[x_test,])
final <- cbind(y_var[test], pred)
# identifying best lamda
best_lam <- cv_output$lambda.min
best_lam
# Rebuilding the model with best lamda value identified
lasso_best <- glmnet(x_vars[train,], y_var[train], alpha = 1, lambda = best_lam)
pred <- predict(lasso_best, s = best_lam, newx = x_vars[x_test,])
final <- cbind(y_var[test], pred)
# Rebuilding the model with best lamda value identified
lasso_best <- glmnet(x_vars[train,], y_var[train], alpha = 1, lambda = best_lam)
pred <- predict(lasso_best, s = best_lam, newx = x_vars[x_test,])
final <- cbind(y_var[test], pred)
actual <- test$actual
preds <- test$predicted
rss <- sum((preds - actual) ^ 2)
tss <- sum((actual - mean(actual)) ^ 2)
rsq <- 1 - rss/tss
rsq
# Inspecting beta coefficients
coef(lasso_best)
# Loading the data
data(swiss)
x_vars <- model.matrix(Fertility~. , swiss)[,-1]
x_vars
x_vars <- model.matrix(HAQ_SDI_Mean ~ Age+Sex+PASIDP_SCORE+Mobility_Aid+Condition+Sedentary_Hrs_Per_Day, data = covid19.survey.data)
x_vars
x_vars <- model.matrix(HAQ_SDI_Mean ~ Age+Sex+PASIDP_SCORE+Mobility_Aid+Condition+Sedentary_Hrs_Per_Day, data = covid19.survey.data)
y_var <- covid19.survey.data$HAQ_SDI_Mean
lambda_seq <- 10^seq(2, -2, by = -.1)
# Splitting the data into test and train
set.seed(86)
train = sample(1:nrow(x_vars), nrow(x_vars)/2)
x_test = (-train)
y_test = y_var[x_test]
cv_output <- cv.glmnet(x_vars[train,], y_var[train],
alpha = 1, lambda = lambda_seq,
nfolds = 5)
cv_output
# identifying best lamda
best_lam <- cv_output$lambda.min
best_lam
# Rebuilding the model with best lamda value identified
lasso_best <- glmnet(x_vars[train,], y_var[train], alpha = 1, lambda = best_lam)
pred <- predict(lasso_best, s = best_lam, newx = x_vars[x_test,])
final <- cbind(y_var[test], pred)
# Checking the first six obs
head(final)
actual <- test$actual
preds <- test$predicted
rss <- sum((preds - actual) ^ 2)
tss <- sum((actual - mean(actual)) ^ 2)
rsq <- 1 - rss/tss
rsq
coef(lasso_best)
model2<-ctree(HAQ_SDI_Mean~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE, data=Anxiety_score_without_na, na.action = na.pass)
plot(model2)
x_vars <- model.matrix(HAQ_SDI_Mean ~ Ethnicity+Age+Sex+PASIDP_SCORE+Mobility_Aid+Condition+Sedentary_Hrs_Per_Day, data = covid19.survey.data)
y_var <- covid19.survey.data$HAQ_SDI_Mean
lambda_seq <- 10^seq(2, -2, by = -.1)
# Splitting the data into test and train
set.seed(86)
train = sample(1:nrow(x_vars), nrow(x_vars)/2)
x_test = (-train)
y_test = y_var[x_test]
cv_output <- cv.glmnet(x_vars[train,], y_var[train],
alpha = 1, lambda = lambda_seq,
nfolds = 5)
# identifying best lamda
best_lam <- cv_output$lambda.min
best_lam
# Rebuilding the model with best lamda value identified
lasso_best <- glmnet(x_vars[train,], y_var[train], alpha = 1, lambda = best_lam)
pred <- predict(lasso_best, s = best_lam, newx = x_vars[x_test,])
final <- cbind(y_var[test], pred)
# Checking the first six obs
head(final)
actual <- test$actual
preds <- test$predicted
rss <- sum((preds - actual) ^ 2)
tss <- sum((actual - mean(actual)) ^ 2)
rsq <- 1 - rss/tss
rsq
coef(lasso_best)
x_vars <- model.matrix(HAQ_SDI_Mean ~ Ethnicity+Age+Sex+PASIDP_SCORE+Mobility_Aid+Condition+Sedentary_Hrs_Per_Day+Situation, data = covid19.survey.data)
y_var <- covid19.survey.data$HAQ_SDI_Mean
lambda_seq <- 10^seq(2, -2, by = -.1)
# Splitting the data into test and train
set.seed(86)
train = sample(1:nrow(x_vars), nrow(x_vars)/2)
x_test = (-train)
y_test = y_var[x_test]
cv_output <- cv.glmnet(x_vars[train,], y_var[train],
alpha = 1, lambda = lambda_seq,
nfolds = 5)
# identifying best lamda
best_lam <- cv_output$lambda.min
best_lam
# Rebuilding the model with best lamda value identified
lasso_best <- glmnet(x_vars[train,], y_var[train], alpha = 1, lambda = best_lam)
pred <- predict(lasso_best, s = best_lam, newx = x_vars[x_test,])
final <- cbind(y_var[test], pred)
# Checking the first six obs
head(final)
actual <- test$actual
preds <- test$predicted
rss <- sum((preds - actual) ^ 2)
tss <- sum((actual - mean(actual)) ^ 2)
rsq <- 1 - rss/tss
rsq
coef(lasso_best)
model2<-ctree(HAQ_SDI_Mean~as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE, data=Anxiety_score_without_na, na.action = na.pass)
plot(model2)
x_vars <- model.matrix(HAQ_SDI_Mean ~ Ethnicity+Age+Sex+PASIDP_SCORE+Mobility_Aid+Condition+Sedentary_Hrs_Per_Day+Situation, data = covid19.survey.data)
y_var <- covid19.survey.data$HAQ_SDI_Mean
lambda_seq <- 10^seq(2, -2, by = -.1)
# Splitting the data into test and train
set.seed(86)
train = sample(1:nrow(x_vars), nrow(x_vars)/2)
x_test = (-train)
y_test = y_var[x_test]
cv_output <- cv.glmnet(x_vars[train,], y_var[train],
alpha = 1, lambda = lambda_seq,
nfolds = 5)
# identifying best lamda
best_lam <- cv_output$lambda.min
best_lam
# Rebuilding the model with best lamda value identified
lasso_best <- glmnet(x_vars[train,], y_var[train], alpha = 1, lambda = best_lam)
pred <- predict(lasso_best, s = best_lam, newx = x_vars[x_test,])
final <- cbind(y_var[test], pred)
# Checking the first six obs
head(final)
actual <- test$actual
preds <- test$predicted
rss <- sum((preds - actual) ^ 2)
tss <- sum((actual - mean(actual)) ^ 2)
rsq <- 1 - rss/tss
rsq
coef(lasso_best)
x_vars <- model.matrix(Anxiety_score_without_na ~ Ethnicity+Age+Sex+PASIDP_SCORE+Mobility_Aid+Condition+Sedentary_Hrs_Per_Day+Situation, data = covid19.survey.data)
x_vars <- model.matrix(Anxiety ~ Ethnicity+Age+Sex+PASIDP_SCORE+Mobility_Aid+Condition+Sedentary_Hrs_Per_Day+Situation, data = covid19.survey.data)
x_vars <- model.matrix(Anxiety_SCORE ~ Ethnicity+Age+Sex+PASIDP_SCORE+Mobility_Aid+Condition+Sedentary_Hrs_Per_Day+Situation, data = covid19.survey.data)
y_var <- covid19.survey.data$HAQ_SDI_Mean
lambda_seq <- 10^seq(2, -2, by = -.1)
# Splitting the data into test and train
set.seed(86)
train = sample(1:nrow(x_vars), nrow(x_vars)/2)
x_test = (-train)
y_test = y_var[x_test]
cv_output <- cv.glmnet(x_vars[train,], y_var[train],
alpha = 1, lambda = lambda_seq,
nfolds = 5)
# identifying best lamda
best_lam <- cv_output$lambda.min
best_lam
# Rebuilding the model with best lamda value identified
lasso_best <- glmnet(x_vars[train,], y_var[train], alpha = 1, lambda = best_lam)
pred <- predict(lasso_best, s = best_lam, newx = x_vars[x_test,])
final <- cbind(y_var[test], pred)
# Checking the first six obs
head(final)
actual <- test$actual
preds <- test$predicted
rss <- sum((preds - actual) ^ 2)
tss <- sum((actual - mean(actual)) ^ 2)
rsq <- 1 - rss/tss
rsq
coef(lasso_best)
model2<-ctree(Anxiety_SCORE~as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE, data=Anxiety_score_without_na, na.action = na.pass)
plot(model2)
model2<-ctree(Anxiety_SCORE~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE, data=Anxiety_score_without_na, na.action = na.pass)
plot(model2)
model2<-ctree(Anxiety_SCORE~Age+ethnicity+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE, data=Anxiety_score_without_na, na.action = na.pass)
model2<-ctree(Anxiety_SCORE~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE, data=Anxiety_score_without_na, na.action = na.pass)
plot(model2)
model2<-ctree(Depression~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE, data=Anxiety_score_without_na, na.action = na.pass)
plot(model2)
Anxiety_score_without_na$Depression_SCORE
model2<-ctree(Depression_SCORE~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE, data=Anxiety_score_without_na, na.action = na.pass)
plot(model2)
model2<-ctree(Depression_SCORE~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE, data=covid19.survey.data, na.action = na.pass)
plot(model2)
model2<-ctree(Depression_SCORE~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=covid19.survey.data, na.action = na.pass)
plot(model2)
model.depression<-ctree(Depression_SCORE~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=covid19.survey.data, na.action = na.pass)
plot(model2)
plot(model.depression)
model.depression<-ctree(Depression_SCORE~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=covid19.survey.data, na.action = na.pass)
plot(model.depression)
summary(model.depression)
plot(model.depression)
model.depression
model.HAQ_SDI_Mean<-ctree(HAQ_SDI_Mean~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=covid19.survey.data, na.action = na.pass)
plot(model.depression)
plot(model.HAQ_SDI_Mean)
model.HAQ_SDI_Mean
model.depression<-ctree(Anxiety_SCORE~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=Anxiety_score_without_na, na.action = na.pass)
model.anxiety<-ctree(Anxiety_SCORE~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=Anxiety_score_without_na, na.action = na.pass)
model.anxiety
plot(model.anxiety)
model.HAQ_SDI_Mean<-ctree(HAQ_SDI_Mean~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=covid19.survey.data, na.action = na.pass)
model.HAQ_SDI_Mean
plot(model.HAQ_SDI_Mean)
model.anxiety<-ctree(Anxiety_SCORE~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=Anxiety_score_without_na, na.action = na.pass)
model.anxiety
plot(model.anxiety)
model.depression<-ctree(Depression_SCORE~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=covid19.survey.data, na.action = na.pass)
model.depression
plot(model.depression)
model.pain<-ctree(HAQ_SDI_Mean~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=covid19.survey.data, na.action = na.pass)
model.pain
plot(model.pain)
model.pain<-ctree(Pain~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=covid19.survey.data, na.action = na.pass)
model.pain
plot(model.pain)
covid19.survey.data$Change_in_PA
model.Change_in_PA<-ctree(Change_in_PA~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=covid19.survey.data, na.action = na.pass)
model.Change_in_PA
plot(model.Change_in_PA)
covid19.survey.data$Change_in_PA
model.Change_in_PA
urp.model.depression<-ctree(Depression_SCORE~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=covid19.survey.data, na.action = na.pass)
urp.model.depression
plot(urp.model.depression)
urp.model.anxiety<-ctree(Anxiety_SCORE~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=Anxiety_score_without_na, na.action = na.pass)
urp.model.anxiety
plot(urp.model.anxiety)
urp.model.HAQ_SDI_Mean<-ctree(HAQ_SDI_Mean~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=covid19.survey.data, na.action = na.pass)
urp.model.HAQ_SDI_Mean
plot(urp.model.HAQ_SDI_Mean)
urp.model.pain<-ctree(Pain~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=covid19.survey.data, na.action = na.pass)
urp.model.pain
plot(urp.model.pain)
urp.model.change_in_PA<-ctree(Change_in_PA~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=covid19.survey.data, na.action = na.pass)
urp.model.change_in_PA
plot(urp.model.change_in_PA)
urp.model.change_in_PA<-partykit::ctree(Change_in_PA~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=covid19.survey.data, na.action = na.pass)
urp.model.change_in_PA
plot(urp.model.change_in_PA)
#--------- URP: Depression ----------
urp.model.depression<-partykit::ctree(Depression_SCORE~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=covid19.survey.data, na.action = na.pass)
urp.model.depression
plot(urp.model.depression)
#--------- URP: Anxiety ----------
#subset data to remove NA from the y variable
Anxiety_score_without_na <-subset(covid19.survey.data, (!is.na(Anxiety_SCORE)))
urp.model.anxiety<-partykit::ctree(Anxiety_SCORE~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=Anxiety_score_without_na, na.action = na.pass)
urp.model.anxiety
plot(urp.model.anxiety)
#--------- URP: HAQ_SDI_Mean ----------
urp.model.HAQ_SDI_Mean<-partykit::ctree(HAQ_SDI_Mean~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=covid19.survey.data, na.action = na.pass)
urp.model.HAQ_SDI_Mean
plot(urp.model.HAQ_SDI_Mean)
#--------- URP: Pain ----------
urp.model.pain<-partykit::ctree(Pain~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=covid19.survey.data, na.action = na.pass)
urp.model.pain
plot(urp.model.pain)
#--------- URP: Change in PA ----------
urp.model.change_in_PA<-partykit::ctree(Change_in_PA~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=covid19.survey.data, na.action = na.pass)
urp.model.change_in_PA
plot(urp.model.change_in_PA)
info_node(node_party(airct_partykit))
info_node(node_party(urp.model.change_in_PA))
info_node(node_party(urp.model.pain))
urp.model.pain
plot(urp.model.pain)
info_node(node_party(urp.model.pain))
info_node(node_party(urp.model.HAQ_SDI_Mean))
plot(urp.model.HAQ_SDI_Mean)
info_node(node_party(urp.model.HAQ_SDI_Mean))
info_node(urp.model.HAQ_SDI_Mean)
info_node(node_party(urp.model.HAQ_SDI_Mean))
info_node(node_party(urp.model.HAQ_SDI_Mean)$Breaks)
info_node(node_party(urp.model.HAQ_SDI_Mean$`7`))
info_node(node_party(urp.model.HAQ_SDI_Mean$7))
info_node(node_party(urp.model.HAQ_SDI_Mean$`7`))
splitvar <- character_split(split_node(node_party(urp.model.HAQ_SDI_Mean)),
+ data = data_party(urp.model.HAQ_SDI_Mean))$1
splitvar <- character_split(split_node(node_party(urp.model.HAQ_SDI_Mean)),
+ data = data_party(urp.model.HAQ_SDI_Mean))$name
splitvar <- character_split(split_node(node_party(urp.model.HAQ_SDI_Mean)),
+ data = data_party(urp.model.HAQ_SDI_Mean))$name
character_split(split_node(node_party(urp.model.HAQ_SDI_Mean)),
+ data = data_party(urp.model.HAQ_SDI_Mean))$name
splitvar <- character_split(split_node(node_party(urp.model.HAQ_SDI_Mean)))
splitvar
node_party
info_node(node_party(urp.model.HAQ_SDI_Mean)$node)
info_node(node_party(urp.model.HAQ_SDI_Mean$node))
info_node(node_party(urp.model.HAQ_SDI_Mean$`2`))
info_node(node_party(urp.model.HAQ_SDI_Mean))
#--------- URP: Pain ----------
urp.model.pain<-partykit::ctree(Pain~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=covid19.survey.data, na.action = na.pass)
urp.model.pain
plot(urp.model.pain)
info_node(node_party(urp.model.pain))
#--------- URP: HAQ_SDI_Mean ----------
urp.model.HAQ_SDI_Mean<-partykit::ctree(HAQ_SDI_Mean~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=covid19.survey.data, na.action = na.pass)
urp.model.HAQ_SDI_Mean
plot(urp.model.HAQ_SDI_Mean)
info_node(node_party(urp.model.HAQ_SDI_Mean))
#--------- URP: Depression ----------
urp.model.depression<-partykit::ctree(Depression_SCORE~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=covid19.survey.data, na.action = na.pass)
urp.model.depression
plot(urp.model.depression)
plot(urp.model.depression)
info_node(node_party(urp.model.depression))
#--------- URP: Anxiety ----------
#subset data to remove NA from the y variable
Anxiety_score_without_na <-subset(covid19.survey.data, (!is.na(Anxiety_SCORE)))
urp.model.anxiety<-partykit::ctree(Anxiety_SCORE~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=Anxiety_score_without_na, na.action = na.pass)
urp.model.anxiety
plot(urp.model.anxiety)
urp.model.anxiety<-partykit::ctree(Anxiety_SCORE~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=Anxiety_score_without_na, na.action = na.pass)
urp.model.anxiety
plot(urp.model.anxiety)
info_node(node_party(urp.model.anxiety))
#--------- URP: HAQ_SDI_Mean ----------
urp.model.HAQ_SDI_Mean<-partykit::ctree(HAQ_SDI_Mean~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=covid19.survey.data, na.action = na.pass)
urp.model.HAQ_SDI_Mean
plot(urp.model.HAQ_SDI_Mean)
#--------- URP: Pain ----------
urp.model.pain<-partykit::ctree(Pain~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=covid19.survey.data, na.action = na.pass)
urp.model.pain
plot(urp.model.pain)
#--------- URP: Change in PA ----------
urp.model.change_in_PA<-partykit::ctree(Change_in_PA~Age+as.factor(Sex)+as.factor(Situation)+as.factor(Condition)+as.factor(Mobility_Aid)+PASIDP_SCORE+Sedentary_Hrs_Per_Day, data=covid19.survey.data, na.action = na.pass)
urp.model.change_in_PA
plot(urp.model.change_in_PA)
info_node(node_party(urp.model.change_in_PA))
library(plotly)
sygen_baseline<- read.csv("/Users/jutzelec/Documents/Github/Acute-Pharmacological-Treatment-in-SCI/shinyapp/data/sygen_summary_stats_for_app.csv", sep = ',', header = T)
width = c(0.8, 0.8)
baseline.sex <- sygen_baseline%>%
dplyr::count(Sex)%>%
dplyr::mutate(frequency=sprintf("%0.1f", n/793*100))%>%
as.data.frame(t())%>%
plotly::plot_ly()%>%
plotly::add_bars(
x = ~Sex,
y =  ~as.numeric(frequency),
marker = list(color = 'rgb(55, 83, 109)'),
width = ~width,
labels = c("Female", "Male"),
text = ~paste("Sex:", Sex,
'</br></br>', "N:", n,
'</br>', "Frequency:", frequency, '%'),
#text = ~n,
hoverinfo = "text")
baseline.sex
width.ais = c(0.8, 0.8, 0.8, 0.8)
baseline.ais <- sygen_baseline%>%
dplyr::count(AIS)%>%
dplyr::mutate(frequency=sprintf("%0.1f", n/793*100))%>%
as.data.frame(t())%>%na_if("")%>%
drop_na(AIS)%>%
plotly::plot_ly()%>%
plotly::add_bars(
x = ~AIS,
y =  ~as.numeric(frequency),
marker = list(color = 'rgb(55, 83, 109)'),
width = ~width.ais,
labels = c("Female", "Male"),
text = ~paste("Injury Severity:", AIS,
'</br></br>', "N:", n,
'</br>', "Frequency:", frequency, '%'),
hoverinfo = "text")%>%
layout(yaxis = list(title = "Proportion [%]"),
xaxis = list(title = ""))
baseline.ais
sygen_baseline<- read.csv("/Users/jutzelec/Documents/Github/Acute-Pharmacological-Treatment-in-SCI/shinyapp/data/sygen_summary_stats_for_app.csv", sep = ',', header = T)
width = c(0.8, 0.8)
baseline.sex <- sygen_baseline%>%
dplyr::count(Sex)%>%
dplyr::mutate(frequency=sprintf("%0.1f", n/793*100))%>%
as.data.frame(t())%>%
plotly::plot_ly()%>%
plotly::add_bars(
x = ~Sex,
y =  ~as.numeric(frequency),
marker = list(color = 'rgb(55, 83, 109)'),
width = ~width,
labels = c("Female", "Male"),
text = ~paste("Sex:", Sex,
'</br></br>', "N:", n,
'</br>', "Frequency:", frequency, '%'),
#text = ~n,
hoverinfo = "text")
baseline.sex
width.ais = c(0.8, 0.8, 0.8, 0.8)
baseline.ais <- sygen_baseline%>%
dplyr::count(AIS)%>%
dplyr::mutate(frequency=sprintf("%0.1f", n/793*100))%>%
as.data.frame(t())%>%na_if("")%>%
drop_na(AIS)%>%
plotly::plot_ly()%>%
plotly::add_bars(
x = ~AIS,
y =  ~as.numeric(frequency),
marker = list(color = 'rgb(55, 83, 109)'),
width = ~width.ais,
labels = c("Female", "Male"),
text = ~paste("Injury Severity:", AIS,
'</br></br>', "N:", n,
'</br>', "Frequency:", frequency, '%'),
hoverinfo = "text")%>%
layout(yaxis = list(title = "Proportion [%]"),
xaxis = list(title = ""))
baseline.ais
sygen_baseline
baseline.sex <- sygen_baseline%>%
dplyr::count(Sex)%>%
dplyr::mutate(frequency=sprintf("%0.1f", n/793*100))%>%
as.data.frame(t())%>%
plotly::plot_ly()%>%
plotly::add_bars(
x = ~Sex,
y =  ~as.numeric(frequency),
marker = list(color = 'rgb(55, 83, 109)'),
width = ~width,
labels = c("Female", "Male"),
text = ~paste("Sex:", Sex,
'</br></br>', "N:", n,
'</br>', "Frequency:", frequency, '%'),
#text = ~n,
hoverinfo = "text")
sygen_baseline$Sex
library(plotly)
sygen_baseline<- read.csv("/Users/jutzelec/Documents/Github/Acute-Pharmacological-Treatment-in-SCI/shinyapp/data/sygen_summary_stats_for_app.csv", sep = ',', header = T)
width = c(0.8, 0.8)
baseline.sex <- sygen_baseline%>%
dplyr::count(Sex)%>%
dplyr::mutate(frequency=sprintf("%0.1f", n/793*100))%>%
as.data.frame(t())%>%
plotly::plot_ly()%>%
plotly::add_bars(
x = ~Sex,
y =  ~as.numeric(frequency),
marker = list(color = 'rgb(55, 83, 109)'),
width = ~width,
labels = c("Female", "Male"),
text = ~paste("Sex:", Sex,
'</br></br>', "N:", n,
'</br>', "Frequency:", frequency, '%'),
#text = ~n,
hoverinfo = "text")
baseline.sex
baseline.sex <- sygen_baseline%>%
dplyr::count(Sex)%>%
dplyr::mutate(frequency=sprintf("%0.1f", n/793*100))%>%
as.data.frame(t())
sygen_baseline%>%
dplyr::count(Sex)%>%
dplyr::mutate(frequency=sprintf("%0.1f", n/793*100))
baseline.sex <- sygen_baseline%>%
dplyr::count(Sex)%>%
dplyr::mutate(frequency=sprintf("%0.1f", n/793*100))%>%
as.data.frame(dplyr::t())%>%
plotly::plot_ly()%>%
plotly::add_bars(
x = ~Sex,
y =  ~as.numeric(frequency),
marker = list(color = 'rgb(55, 83, 109)'),
width = ~width,
labels = c("Female", "Male"),
text = ~paste("Sex:", Sex,
'</br></br>', "N:", n,
'</br>', "Frequency:", frequency, '%'),
#text = ~n,
hoverinfo = "text")
sygen_baseline%>%
dplyr::count(Sex)%>%
dplyr::mutate(frequency=sprintf("%0.1f", n/793*100))%>%
as.data.frame(t())
baseline.sex <- sygen_baseline%>%
dplyr::count(Sex)%>%
dplyr::mutate(frequency=sprintf("%0.1f", n/793*100))%>%
as.data.frame(base::t())%>%
plotly::plot_ly()%>%
plotly::add_bars(
x = ~Sex,
y =  ~as.numeric(frequency),
marker = list(color = 'rgb(55, 83, 109)'),
width = ~width,
labels = c("Female", "Male"),
text = ~paste("Sex:", Sex,
'</br></br>', "N:", n,
'</br>', "Frequency:", frequency, '%'),
#text = ~n,
hoverinfo = "text")
